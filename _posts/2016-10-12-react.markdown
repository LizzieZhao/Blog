---
layout:     post
title:      "React 封装 Form 组件"
subtitle:   "利用 React 封装 Form 组件所遇到的所有的坑以及解决方案"
date:       2016-10-13 08:00:00
author:     "Lina"
header-img: "img/post-bg-react.jpg"
catalog: true
tags:
    - React
    - Form 表单
    - fetch
---

## 前言

来到公司后，接手的第一个项目是用 React 封装一套 UI 框架，我负责的是整个 Form 表单这部分。

在对 Form 表单进行封装的时候，遇到了很多问题。在这里对遇到的问题进行一次总结。

写了这么久了，组件还是一堆 bug ，好心塞:(

---

## 正文

### state / props

state 是会改变的。譬如对于 Input 组件来说，value 就是一个 state。

每次用户输入时，都会更改 Input 的 value 状态。

props 是属性的意思。也就是说它不会随便改变。

所以在写组件的时候要严格区分 state 和 props 的区别，避免在组件里面混淆。

---

### props 的传递

在对组件进行封装的时候，要考虑组件本身的属性，比如 `<input/>` 元素本身就有 value、name、placeholder等属性，所以以下这种写法是没问题的。

![props 的传递](/img/in-posts/react_01.png)

然后我给 Input 组件增加了 validate 这个属性，并且以上面这种传递给 Input。

然后就报错了。当时一直不明白这个错误为什么会有，知道后来才明白。

**只能给 element 传递它本身有的属性，因为它归根结底还是要以 html 中 Dom 的形式展现出来**

---

### WillReceiveProps

几乎所有的组件都需要 WillReceiveProps 这个生命周期。

假如组件的某个 props 可以接受外部参数，并且这个外部参数不是固定的，这个时候就需要 WillReceiveProps 这个方法。

---

### Input 的 value 设置

在 Input 组件的 defaultProps 里面，会有设置 value 的 defaultProps 为 ""。

原因是，Input 组件如果一开始没有 value 值，它就是一个不可控元素。

此时对它 value 进行动态更改，在 React 里面是不支持的。

---

### Form 表单组件之间的数据传递

一开始写完了单个组件，并且在单个组件的 state 状态中都可以取到选中值，但是却没办法进行数据的传递。

譬如说，这样的结构：

![数据传递](/img/in-posts/react_02.png)

想在 FormItem 里面直接取到 Input 的值，也就是说想让 FormItem 的 value 状态跟 Input 的 value 状态保持同步。

我们知道，React 是单向数据流，也就是说，Input 可以从 props 中轻而易举的获得到东西，但是 FormItem 组件却不能这样简单的获取到 Input 的数据。

这个时候就用到了在 Form 表单中十分重要的东西**回调**

回调，callback

有个很形象的解释： 譬如你有事情找你朋友，打电话发现朋友手机正忙。你不可能一直 call 直到你朋友接电话吧。不过你非要这么干，我只能祝你孤独终老了。于是，你就给你朋友发了个信息，“忙完 call 我哈！”。然后你朋友忙完了，看到了你的消息，给你 call 了回去，你就跟你朋友谈事情了哈。

是不是感觉似曾相识，十分常见啊，这就是我们说的回调。

具体在 React 组件中的表现，就是在 FromItem 组件上定义了一个回调函数，譬如说我要 value 值之类，然后以 clone 的方式传递给 FormItem 的 Children，然后在 Children 组件中检测有没有这个函数，类似张三回去先去看看门口有没有小便条，如果有的话，就执行这个方法。

似不似很简单啊！！！事实证明我花了好久才理顺这个回调的用法。

菜鸟伤不起！！！

---

### Form 取值问题

上面说到的这个回调，是内部使用的回调，整个 Form 组件内部使用来进行数据传输。

然后的然后，在测试的时候发现了一个极其蛋疼的 bug，这个 bug 就是，假设我页面中有两个 Form 表单，分别是表单1和表单2。

按照正常的逻辑，Form 表单1 的 data 里面应该只有表单1里面的数据，表单2 的 data 里面只有表单2里面的数据。这样才是正确的对吧 :)

但是。。。

我的 Form 表单１和表单２都能取到所有的数据。

什么意思嘞，就是我表单１的数据里面也有表单２的数据啊。。。

![蓝瘦香菇](/img/in-posts/react_03.jpg)

然后，我找了很久很久的 bug，真的是一行一行的检查代码，虽说一个组件也就二三百行，但是是个组件，也是看了两三千行的代码，一个个排除。

当我找到 bug 的问题在对 Form 组件设置 defaultProps 的时候设置了一个

![问题所在](/img/in-posts/react_04.png)

简直在逗我哈！

为什么这么写就会有这种问题呢，这是因为 React 的 defaultProps 里面设置一个空对象，为了节省空间，节省内存，React 对于这种设置拿到的空对象实际上是同一个，也就是说即使页面中有两个 Form 表单，我预先申请的只有一个 data 空间。所以会出现这种数据混乱的状况。

---

### Form 虚拟表单

为什么会涉及这个问题，是因为我们所做的 Form 组件给外部提供了一个可以更改数据的接口。

如果是异步提交数据，那么这个问题就很好处理了。

但是如果是同步提交数据的话，用户在点击提交的时候就会立马跳转。

那么怎么才能既能让用户对数据进行处理，也能进行同步提交呢？

这就是 **虚拟表单** 的作用。

处理方式是在 Form 组件内部，无论同步提交还是异步提交，都先阻止表单的默认提交。

如果表单是同步提交的，那么先从外部接口拿到用户更改后的数据，然后在内部伪造一个虚拟表单进行提交。

---

### Form 表单递归

严格来说，Form 组件的 Children 只能是属于 Form 表单的组件。但是在实际的项目使用中，不少人需要使用 Col 和 Row 或者其他元素来对表单进行布局或者实现其他功能。

这个时候就要求 Form 表单具有非常强的辨识能力。

不放过任何一个 Form 表单元素，并成功把回调赋给组件。并且不随便传递回调。

不属于表单元素组件的元素不传递回调。

所以 Form 组件需要遍历所有的 Children，包括 Children 的 Children，直至找到正确的那个元素，并成功把回调以及其他属性赋给它。

---

### React 的 key 值问题

在 React 中使用 map，需要给 map 的元素一个 key 属性。否则就会报错。

这个问题解决起来很简单，就是在 map 的时候多写一个 index 参数，然后把 key 值设置为 index 就好了。

---

### Form 组件外部接口问题

所有的表单元素组件需要给外部一个获取 value 的接口。

这个接口需要在**onChange**、**willReceiveProps**的时候调用。

接口目前存在一个 bug， 既 CheckboxGroup 组件接口只要外部设置 setState，就会出现死循环现象。

原因是，在外部 setState，会重新 render 组件，组件内部会调用 willReceiveProps 这个生命周期，而在这个生命周期里面，又会调用外部接口。所以，死循环。

解决方法还未找到。。。

---

### setState 存在 diff 问题

---

### Form 校验空的问题

---


## 后记





